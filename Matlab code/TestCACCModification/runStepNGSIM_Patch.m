%% ngsim model with smoothing patch
% this smoothing method follows the leader's speed instead of the position
function [pos, vel, error, acc, rule]...
        = runStepNGSIM_Patch(pos_follower, ...
                       speed_follower, ....
                       pos_leader, ...
                       speed_leader,...
                       vehLen, ...
                       desired_headway,...
                       deltaT,maxAcc,maxDec,...
                       reaction_time,...
                       jamGap,...
                       vf,...
                       current_acc,...
                       theta,...
                       b_estimate)
                   
maxDec = -maxDec;
b_estimate = maxDec*b_estimate;
spacing = pos_leader - pos_follower - vehLen;
% Gipps safety term
v_after_tau = maxDec*(reaction_time+theta)+...
    sqrt(...
        maxDec^2*(reaction_time+theta)^2-...
        maxDec*(2*(pos_leader-pos_follower-jamGap-vehLen)-...
                speed_follower*reaction_time-speed_leader*speed_leader/b_estimate...
               )...
        );
% The maximum speed based on gipps safety criterion
max_a = min(maxAcc, ...
    max(maxDec, (v_after_tau-speed_follower)/reaction_time));
   
% The acceleration based on Newell rule
newell_a = min(maxAcc, ...
    max(maxDec, (spacing/desired_headway-speed_follower)...
    /(desired_headway/2)));

% free a
min_a = maxAcc*(1-speed_follower/vf);

acc_target = min(min(min_a, newell_a), max_a);
acc = current_acc + (acc_target-current_acc)/2;
vel = speed_follower+acc*deltaT;
pos = pos_follower+ (vel+speed_follower)/2*deltaT;

if acc_target == max_a % safety rule
    rule = 0;
else
    if acc_target == min_a %max acc mode
        rule = 1;
    elseif acc_target == newell_a %Newell mode        
        rule = 2;
    end
end

error=0;